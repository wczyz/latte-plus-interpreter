# Deklaracja języka

## Opis

Język Latte rozszerzony o:
* inferencję typów
* funkcje zagnieżdżone ze statycznym wiązaniem
* funkcje wyższego rzędu, anonimowe i domknięcia

## Gramatyka

Gramatyka języka Latte z następującymi zmianami:
```
FunDecl.   Stmt ::= TopDef ;

Fun.       Type ::= Type "(" [Type] ")" ;

Infer.     Type ::= "auto" ;

ELambda.   Expr6 ::= "(" [Arg] ")" "=>" Type Block ;

```


Cała gramatyka:
```
-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Block ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

FunDecl.   Stmt ::= TopDef ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

Fun.       Type ::= Type "(" [Type] ")" ;

Infer.     Type ::= "auto" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

ELambda.   Expr6 ::= "(" [Arg] ")" "=>" Type Block ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
```

## Przykłady

```
int main() {
    string a = "a";

    auto g() {
        string b = "b";

        return () => auto {
            string c = "c";

            return () => auto {
                string d = "d";
                print(a);
                print(b);
                print(c);
                print(d);
                return;
            };
        };
    };

    auto f = g();
    f();
}
```



## Tabelka funkcjonalności

Na 15 punktów

* 01 (trzy typy)
* 02 (literały, arytmetyka, porównania)
* 03 (zmienne, przypisanie)
* 04 (print)
* 05 (while, if)
* 06 (funkcje lub procedury, rekurencja)
* 07 (przez zmienną / przez wartość / in/out)
* 08 (zmienne read-only i pętla for)

Na 20 punktów
* 09 (przesłanianie i statyczne wiązanie)
* 10 (obsługa błędów wykonania)
* 11 (funkcje zwracające wartość)

Na 30 punktów
* 12 (4) (statyczne typowanie)
* 13 (2) (funkcje zagnieżdżone ze statycznym wiązaniem)
* 17 (4) (funkcje wyższego rzędu, anonimowe, domknięcia)

Razem 30 pkt
